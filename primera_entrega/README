# API de Productos y Carritos (Node.js + Express)

API para gestionar **productos** y **carritos de compra** con persistencia en archivos JSON usando el sistema de archivos. Cumple los requisitos de la *Primera Entrega* del curso: rutas separadas, IDs autogenerados, y operaciones CRUD.

## Tecnologías

- Node.js
- Express
- File System (fs/promises)

## Estructura del proyecto

```

mi-api/
├─ package.json
├─ .gitignore
└─ src/
├─ app.js
├─ routes/
│  ├─ products.router.js
│  └─ carts.router.js
├─ managers/
│  ├─ ProductManager.js
│  └─ CartManager.js
├─ utils/
│  └─ fileUtils.js
└─ data/
├─ products.json
└─ carts.json

````

## Instalación

```bash
npm install
````

## Ejecución

* Desarrollo (reinicio automático con nodemon):

  ```bash
  npm run dev
  ```
* Producción:

  ```bash
  npm start
  ```

El servidor escucha en **[http://localhost:8080](http://localhost:8080)**.

## Endpoints

### Productos `/api/products`

* `GET /` → lista todos los productos.
* `GET /:pid` → obtiene un producto por id.
* `POST /` → crea un producto (el `id` se **autogenera**).
* `PUT /:pid` → actualiza campos del producto (no permite cambiar el `id`).
* `DELETE /:pid` → elimina un producto por id.

**Campos del producto**:

* `title` (string, requerido)
* `description` (string, requerido)
* `code` (string, requerido y único)
* `price` (number, requerido)
* `status` (boolean, requerido)
* `stock` (number, requerido)
* `category` (string, requerido)
* `thumbnails` (array de strings, requerido)

### Carritos `/api/carts`

* `POST /` → crea un carrito `{ id, products: [] }`.
* `GET /:cid` → lista los productos del carrito (array de `{ product, quantity }`).
* `POST /:cid/product/:pid` → agrega el producto `pid` al carrito `cid`.
  Si ya existe en el carrito, **incrementa** `quantity`.

## Ejemplos con cURL

> Para **Git Bash / Linux / macOS**:

### Crear un producto

```bash
curl -X POST http://localhost:8080/api/products \
  -H "Content-Type: application/json" \
  -d '{
    "title": "Laptop Pro 14",
    "description": "Equipo portátil de alto rendimiento",
    "code": "LP14-001",
    "price": 28999.90,
    "status": true,
    "stock": 50,
    "category": "computo",
    "thumbnails": ["images/lp14-front.jpg", "images/lp14-back.jpg"]
  }'
```

### Listar todos

```bash
curl http://localhost:8080/api/products
```

### Obtener por id

```bash
curl http://localhost:8080/api/products/1
```

### Actualizar (precio/stock)

```bash
curl -X PUT http://localhost:8080/api/products/1 \
  -H "Content-Type: application/json" \
  -d '{"price":27999.90,"stock":45}'
```

### Eliminar

```bash
curl -X DELETE http://localhost:8080/api/products/1
```

### Carritos: crear

```bash
curl -X POST http://localhost:8080/api/carts
```

### Carritos: agregar producto (cid=1, pid=2)

```bash
curl -X POST http://localhost:8080/api/carts/1/product/2
```

### Carritos: consultar

```bash
curl http://localhost:8080/api/carts/1
```

## Ejemplos equivalentes en PowerShell

```powershell
# Crear producto
$data = @{
  title       = "Laptop Pro 14"
  description = "Equipo portátil de alto rendimiento"
  code        = "LP14-001"
  price       = 28999.90
  status      = $true
  stock       = 50
  category    = "computo"
  thumbnails  = @("images/lp14-front.jpg","images/lp14-back.jpg")
} | ConvertTo-Json

Invoke-RestMethod -Method POST -Uri "http://localhost:8080/api/products" -ContentType "application/json" -Body $data

# Listar todos
Invoke-RestMethod -Method GET -Uri "http://localhost:8080/api/products"

# Obtener por id
Invoke-RestMethod -Method GET -Uri "http://localhost:8080/api/products/1"

# Actualizar
$upd = @{ price = 27999.90; stock = 45 } | ConvertTo-Json
Invoke-RestMethod -Method PUT -Uri "http://localhost:8080/api/products/1" -ContentType "application/json" -Body $upd

# Eliminar
Invoke-RestMethod -Method DELETE -Uri "http://localhost:8080/api/products/1"

# Carritos
$cart = Invoke-RestMethod -Method POST -Uri "http://localhost:8080/api/carts"
Invoke-RestMethod -Method POST -Uri "http://localhost:8080/api/carts/$($cart.data.id)/product/2"
Invoke-RestMethod -Method GET -Uri "http://localhost:8080/api/carts/$($cart.data.id)"
```

## Validación visual

* Revisa `src/data/products.json` y `src/data/carts.json` después de cada operación.
* Deben reflejar los cambios en un formato legible (JSON con sangría).

## Notas

* La ruta raíz `/` no está definida por defecto. Usa `/health`, `/api/products`, `/api/carts`.
* `id` de productos y carritos se autogenera y **no es editable** por API.
* Si intentas repetir `code` de producto, la API responde **409**.